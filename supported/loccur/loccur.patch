Index: loccur.el
===================================================================
--- loccur.el	(revision 3)
+++ loccur.el	(working copy)
@@ -27,7 +27,7 @@
 ;;; Commentary:
 ;;
 ;; Add the following to your .emacs file:
-;; 
+;;
 ;; (require 'loccur)
 ;; ;; defines shortcut for loccur of the current word
 ;; (define-key global-map [(control o)] 'loccur-current)
@@ -41,7 +41,7 @@
 ;; gives unexpected jumps in loccur mode
 ;;
 ;;; TODO:
-;; 
+;;
 ;;; Change Log:
 ;;
 ;; 2009-10-05 (1.1.0)
@@ -85,7 +85,7 @@
 
 
 (defun loccur-mode (regex)
-  (setq	loccur-mode 
+  (setq	loccur-mode
 		(if (or loccur-mode
 				(null regex)
 				(zerop (length regex)))
@@ -116,16 +116,16 @@
 This command hides all lines from the current buffer except those
 containing the regular expression REGEX. A second call of the function
 unhides lines again"
-  (interactive 
+  (interactive
    (if loccur-mode
 	   (list nil)
-     (loccur-prompt)))
+     (list (read-string (concat "Regexp<" (loccur-prompt) ">: ") "" 'loccur-history ))))
+  (if (string-equal "" regex) (setq regex (loccur-prompt)))
   (loccur-mode regex))
 
 
 (defun loccur-prompt ()
-  "Prompts for a regexp to search
-
+  "Returns the default value of the prompt.
 Default value for prompt is a current word or active region(selection),
 if its size is 1 line"
   (let ((prompt
@@ -139,13 +139,14 @@
                       (line-number-at-pos pos2))
                    (buffer-substring-no-properties pos1 pos2)))
            (current-word))))
-    (list (read-string "Regexp: " prompt 'loccur-history ))))
+    prompt))
 
 
+
 (defun loccur-1 (regex)
   (let* ((buffer-matches (loccur-find-matches regex))
 		 (ovl-bounds (loccur-create-overlay-bounds-btw-lines buffer-matches)))
-	(setq loccur-overlay-list 
+	(setq loccur-overlay-list
 		  (loccur-create-invisible-overlays ovl-bounds))
     (setq loccur-overlay-list
           (append loccur-overlay-list
@@ -154,28 +155,28 @@
 	(recenter)))
 
 (defun loccur-create-highlighted-overlays(buffer-matches)
-  (let ((overlays 
+  (let ((overlays
 		 (map 'list #'(lambda (match)
 						(make-overlay
 						 (nth 1 match)
 						 (nth 2 match)
 						 (current-buffer) t nil))
 			  buffer-matches)))
-	(mapcar (lambda (ovl) 
+	(mapcar (lambda (ovl)
               (overlay-put ovl loccur-overlay-property-name t)
              (overlay-put ovl 'face 'isearch))
             overlays)))
 
 
 (defun loccur-create-invisible-overlays (ovl-bounds)
-  (let ((overlays 
+  (let ((overlays
 		 (map 'list #'(lambda (bnd)
 						(make-overlay
 						 (car bnd)
 						 (cadr bnd)
 						 (current-buffer) t nil))
 			  ovl-bounds)))
-	(mapcar (lambda (ovl) 
+	(mapcar (lambda (ovl)
               (overlay-put ovl loccur-overlay-property-name t)
               (overlay-put ovl 'invisible t)
               ;; force intangible property if invisible property
